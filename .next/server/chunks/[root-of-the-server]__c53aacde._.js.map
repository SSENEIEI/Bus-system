{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":["file:///Users/sonjutha/Downloads/Bus-system/src/lib/db.js"],"sourcesContent":["import mysql from 'mysql2/promise';\r\n\r\n// Reusable pool for MySQL/MariaDB (XAMPP) and optional TiDB in production.\r\n// NOTE: We now prefer local XAMPP by default during development. TiDB is only\r\n// used when NODE_ENV=production (or when DB_PREFER_LOCAL is not true) and a\r\n// DATABASE_URL is provided. This prevents accidental TiDB usage while developing.\r\n// TiDB Cloud connection string example (for production .env):\r\n// DATABASE_URL=\"mysql://<user>:<password>@<host>:4000/truck_booking_system?ssl={\\\"rejectUnauthorized\\\":true}\"\r\n// You can append &timezone=Z to force UTC if needed.\r\n\r\nlet pool; // cached across hot reloads (Next.js dev) and lambda invocations\r\n\r\nconst isProd = process.env.NODE_ENV === 'production';\r\n// Prefer local DB when developing unless explicitly overridden\r\nconst preferLocal = process.env.DB_PREFER_LOCAL === 'true' || !isProd;\r\n\r\nexport function getPool() {\r\n  if (!pool) {\r\n    // Determine pool size once\r\n    const connectionLimit = Number(process.env.DB_POOL_SIZE || (preferLocal ? 10 : 5));\r\n    const ensureUrlHasTiDBSSL = (raw) => {\r\n      try {\r\n        const u = new URL(raw);\r\n        const isTiDB = /tidbcloud\\.com$/i.test(u.hostname || '');\r\n        if (isTiDB) {\r\n          const sp = u.searchParams;\r\n          if (!sp.has('ssl')) sp.set('ssl', JSON.stringify({ rejectUnauthorized: true }));\r\n          if (!sp.has('timezone')) sp.set('timezone', 'Z');\r\n          u.search = sp.toString();\r\n          return u.toString();\r\n        }\r\n      } catch {}\r\n      return raw;\r\n    };\r\n\r\n    // 1) Production TiDB via DATABASE_URL (only if not preferring local)\r\n    if (!preferLocal && process.env.DATABASE_URL) {\r\n      const url = ensureUrlHasTiDBSSL(process.env.DATABASE_URL);\r\n      pool = mysql.createPool(url);\r\n    }\r\n    // 2) Explicit host/user via env (works for local XAMPP or any MySQL)\r\n    else if (process.env.DB_HOST || process.env.DB_USERNAME) {\r\n      const isLocalHost = (process.env.DB_HOST || '').includes('localhost') || (process.env.DB_HOST || '').startsWith('127.');\r\n      const isTiDB = /tidbcloud\\.com$/i.test(process.env.DB_HOST || '');\r\n      const useSSL = ((process.env.DB_SSL === 'true') || isTiDB) && !isLocalHost; // force SSL for TiDB\r\n      pool = mysql.createPool({\r\n        host: process.env.DB_HOST || 'localhost',\r\n        port: Number(process.env.DB_PORT || 3306),\r\n        user: process.env.DB_USERNAME || 'root',\r\n        password: process.env.DB_PASSWORD || '',\r\n  database: process.env.DB_DATABASE || 'Bus-system',\r\n        ...(useSSL ? { ssl: { rejectUnauthorized: true, minVersion: 'TLSv1.2', servername: process.env.DB_HOST }, timezone: 'Z' } : {}),\r\n        waitForConnections: true,\r\n        connectionLimit,\r\n        queueLimit: 0\r\n      });\r\n    }\r\n    // 3) Default local XAMPP\r\n    else {\r\n      pool = mysql.createPool({\r\n        host: 'localhost',\r\n        port: 3306,\r\n        user: 'root',\r\n        password: '', // default password : 'admin1234'\r\n  database: 'Bus-system',\r\n        waitForConnections: true,\r\n        connectionLimit,\r\n        queueLimit: 0\r\n      });\r\n    }\r\n  }\r\n  return pool;\r\n}\r\n\r\n// Simple query helper\r\nexport async function query(sql, params = []) {\r\n  const [rows] = await getPool().execute(sql, params);\r\n  return rows;\r\n}\r\n\r\n// Health check (can be used in an /api/health route)\r\nexport async function testConnection() {\r\n  const conn = await getPool().getConnection();\r\n  try {\r\n    await conn.ping();\r\n    return true;\r\n  } finally {\r\n    conn.release();\r\n  }\r\n}\r\n\r\n// Backwards compatibility (if existing code expects getConnection())\r\n// export async function getConnection() {\r\n//   // For Vercel/TiDB deployment, it will use the DATABASE_URL environment variable.\r\n//   // For local development, it will use the local MySQL connection details.\r\n//   const connection = await mysql.createConnection(process.env.DATABASE_URL || {\r\n//     host: 'localhost',\r\n//     user: 'root',\r\n//     password: '',\r\n//     database: 'Bus-system',\r\n//     //default password : 'admin1234'\r\n//   });\r\n//   return connection;\r\n// }\r\n\r\n// Initialize schema in TiDB / MySQL if it does not exist yet.\r\n// Safe to call multiple times; uses IF NOT EXISTS / defensive checks.\r\nexport async function initDatabase(options = {}) {\r\n  const { seed = false } = options; // seed inserts sample data (optional)\r\n  // Ensure the target database exists (handy for fresh XAMPP installs)\r\n  // IMPORTANT: When using DATABASE_URL (e.g., TiDB on Vercel), skip this bootstrap step\r\n  // because connecting to localhost would fail. We assume the DB/schema already exists.\r\n  const usingDatabaseUrl = (!preferLocal && !!process.env.DATABASE_URL);\r\n  if (!usingDatabaseUrl) {\r\n    try {\r\n      // Derive connection settings (local-first)\r\n      const host = process.env.DB_HOST || 'localhost';\r\n      const port = Number(process.env.DB_PORT || 3306);\r\n      const user = process.env.DB_USERNAME || 'root';\r\n      const password = process.env.DB_PASSWORD || '';\r\n      const dbName = process.env.DB_DATABASE || 'Bus-system';\r\n\r\n      // Create the database if missing using a direct connection without selecting a DB\r\n      const isLocalHost = (host || '').includes('localhost') || (host || '').startsWith('127.');\r\n      const useSSL = process.env.DB_SSL === 'true' && !isLocalHost;\r\n      const bootstrapConn = await mysql.createConnection({\r\n        host,\r\n        port,\r\n        user,\r\n        password,\r\n        ...(useSSL ? { ssl: { rejectUnauthorized: true, minVersion: 'TLSv1.2', servername: host } } : {}),\r\n      });\r\n      try {\r\n        await bootstrapConn.query(\r\n          `CREATE DATABASE IF NOT EXISTS \\`${dbName}\\` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci`\r\n        );\r\n      } finally {\r\n        await bootstrapConn.end();\r\n      }\r\n    } catch (e) {\r\n      console.error('Failed to ensure database exists:', e.message);\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  const pool = getPool();\r\n\r\n  // Helper to run queries safely\r\n  const exec = async (sql) => {\r\n    try { await pool.query(sql); } catch (err) {\r\n      if (!/Duplicate|exists|already/i.test(err.message)) {\r\n        console.error('Schema statement failed:', err.message, '\\nSQL:', sql);\r\n        throw err;\r\n      }\r\n    }\r\n  };\r\n\r\n  // MariaDB-safe helper: add FK if missing by checking INFORMATION_SCHEMA\r\n  const ensureForeignKey = async (table, constraintName, definition) => {\r\n    const [rows] = await pool.query(\r\n      `SELECT CONSTRAINT_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS\r\n       WHERE CONSTRAINT_SCHEMA = DATABASE() AND TABLE_NAME = ? AND CONSTRAINT_NAME = ?`,\r\n      [table, constraintName]\r\n    );\r\n    if (rows.length === 0) {\r\n      await pool.query(`ALTER TABLE \\`${table}\\` ADD CONSTRAINT \\`${constraintName}\\` ${definition}`);\r\n    }\r\n  };\r\n\r\n  // 0) Legacy tables (keep for backward compatibility; safe to keep)\r\n  await exec(`CREATE TABLE IF NOT EXISTS products (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    name VARCHAR(150) NOT NULL,\r\n    vendor VARCHAR(150) NOT NULL,\r\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\r\n    UNIQUE KEY unique_product_vendor (name, vendor)\r\n  ) CHARSET=utf8mb4`);\r\n  await exec(`CREATE TABLE IF NOT EXISTS locations (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    name VARCHAR(100) NOT NULL UNIQUE,\r\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\r\n  ) CHARSET=utf8mb4`);\r\n\r\n  // 1) Users (enhanced)\r\n  await exec(`CREATE TABLE IF NOT EXISTS users (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    username VARCHAR(100) NOT NULL,\r\n    password VARCHAR(255) NOT NULL,\r\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\r\n    UNIQUE KEY username (username)\r\n  ) CHARSET=utf8mb4`);\r\n  // Add new columns if missing\r\n  await exec(`ALTER TABLE users ADD COLUMN IF NOT EXISTS is_admin TINYINT(1) NOT NULL DEFAULT 0`);\r\n  await exec(`ALTER TABLE users ADD COLUMN IF NOT EXISTS is_super_admin TINYINT(1) NOT NULL DEFAULT 0`);\r\n  await exec(`ALTER TABLE users ADD COLUMN IF NOT EXISTS display_name VARCHAR(100) NULL`);\r\n  await exec(`ALTER TABLE users ADD COLUMN IF NOT EXISTS department VARCHAR(100) NULL`);\r\n  await exec(`ALTER TABLE users ADD COLUMN IF NOT EXISTS plant_id INT NULL`);\r\n  await exec(`ALTER TABLE users ADD COLUMN IF NOT EXISTS department_id INT NULL`);\r\n\r\n  // 2) Plants / Departments\r\n  await exec(`CREATE TABLE IF NOT EXISTS plants (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    code VARCHAR(10) NOT NULL UNIQUE,\r\n    name VARCHAR(100) NULL,\r\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\r\n  ) CHARSET=utf8mb4`);\r\n  await exec(`CREATE TABLE IF NOT EXISTS departments (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    plant_id INT NOT NULL,\r\n    code VARCHAR(50) NOT NULL,\r\n    name VARCHAR(100) NULL,\r\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\r\n    UNIQUE KEY uniq_plant_code (plant_id, code),\r\n    KEY plant_idx (plant_id)\r\n  ) CHARSET=utf8mb4`);\r\n\r\n  // FK for users -> plants/departments (MariaDB-compatible)\r\n  await ensureForeignKey('users', 'users_plant_fk', 'FOREIGN KEY (plant_id) REFERENCES plants(id) ON DELETE SET NULL');\r\n  await ensureForeignKey('users', 'users_department_fk', 'FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE SET NULL');\r\n  await ensureForeignKey('departments', 'dept_plant_fk', 'FOREIGN KEY (plant_id) REFERENCES plants(id) ON DELETE CASCADE');\r\n\r\n  // 2.1) User departments (many-to-many for department memberships)\r\n  await exec(`CREATE TABLE IF NOT EXISTS user_departments (\r\n    user_id INT NOT NULL,\r\n    department_id INT NOT NULL,\r\n    PRIMARY KEY (user_id, department_id)\r\n  ) CHARSET=utf8mb4`);\r\n  await ensureForeignKey('user_departments', 'ud_user_fk', 'FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE');\r\n  await ensureForeignKey('user_departments', 'ud_dept_fk', 'FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE CASCADE');\r\n\r\n  // 3) Shifts / Depart Times\r\n  await exec(`CREATE TABLE IF NOT EXISTS shifts (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    name_th VARCHAR(100) NOT NULL,\r\n    name_en VARCHAR(100) NULL,\r\n    is_active TINYINT(1) NOT NULL DEFAULT 1,\r\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\r\n  ) CHARSET=utf8mb4`);\r\n  await exec(`CREATE TABLE IF NOT EXISTS depart_times (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    shift_id INT NOT NULL,\r\n    time TIME NOT NULL,\r\n    is_entry TINYINT(1) NOT NULL DEFAULT 0,\r\n    is_active TINYINT(1) NOT NULL DEFAULT 1,\r\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\r\n    deactivated_at DATETIME NULL,\r\n    UNIQUE KEY uniq_shift_time_type (shift_id, time, is_entry),\r\n    KEY shift_idx (shift_id)\r\n  ) CHARSET=utf8mb4`);\r\n  await ensureForeignKey('depart_times', 'dt_shift_fk', 'FOREIGN KEY (shift_id) REFERENCES shifts(id) ON DELETE CASCADE');\r\n  // Backfill columns for existing databases (TiDB/MySQL support IF NOT EXISTS)\r\n  await exec(`ALTER TABLE depart_times\r\n    ADD COLUMN IF NOT EXISTS updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\r\n    ADD COLUMN IF NOT EXISTS deactivated_at DATETIME NULL,\r\n    ADD COLUMN IF NOT EXISTS is_entry TINYINT(1) NOT NULL DEFAULT 0`);\r\n\r\n  // Ensure unique index includes is_entry; drop legacy index if present\r\n  try {\r\n    const [idx] = await pool.query(\r\n      `SELECT INDEX_NAME FROM INFORMATION_SCHEMA.STATISTICS\r\n       WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'depart_times' AND INDEX_NAME = 'uniq_shift_time_type'`\r\n    );\r\n    if (idx.length === 0) {\r\n      // Drop old unique if exists\r\n      const [oldIdx] = await pool.query(\r\n        `SELECT INDEX_NAME FROM INFORMATION_SCHEMA.STATISTICS\r\n         WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'depart_times' AND INDEX_NAME = 'uniq_shift_time'`\r\n      );\r\n      if (oldIdx.length > 0) {\r\n        await pool.query(`ALTER TABLE depart_times DROP INDEX uniq_shift_time`);\r\n      }\r\n      await pool.query(`ALTER TABLE depart_times ADD UNIQUE INDEX uniq_shift_time_type (shift_id, time, is_entry)`);\r\n    }\r\n  } catch (e) {\r\n    // Non-fatal: log and continue\r\n    console.warn('Index migration for depart_times skipped:', e.message);\r\n  }\r\n\r\n  // 4) Routes (สายรถ)\r\n  await exec(`CREATE TABLE IF NOT EXISTS routes (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    name VARCHAR(100) NOT NULL,\r\n    vendor VARCHAR(100) NULL,\r\n    display_order INT NOT NULL DEFAULT 0,\r\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\r\n  ) CHARSET=utf8mb4`);\r\n\r\n  // 5) OT counts per date/route/plant/department/shift/depart_time\r\n  await exec(`CREATE TABLE IF NOT EXISTS ot_counts (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    the_date DATE NOT NULL,\r\n    route_id INT NOT NULL,\r\n    plant_id INT NOT NULL,\r\n    department_id INT NOT NULL,\r\n    shift_id INT NOT NULL,\r\n    depart_time_id INT NOT NULL,\r\n    count INT UNSIGNED NOT NULL DEFAULT 0,\r\n    UNIQUE KEY uniq_count (the_date, route_id, plant_id, department_id, shift_id, depart_time_id),\r\n    KEY date_idx (the_date)\r\n  ) CHARSET=utf8mb4`);\r\n  await ensureForeignKey('ot_counts', 'otc_route_fk', 'FOREIGN KEY (route_id) REFERENCES routes(id) ON DELETE CASCADE');\r\n  await ensureForeignKey('ot_counts', 'otc_plant_fk', 'FOREIGN KEY (plant_id) REFERENCES plants(id) ON DELETE CASCADE');\r\n  await ensureForeignKey('ot_counts', 'otc_dept_fk', 'FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE CASCADE');\r\n  await ensureForeignKey('ot_counts', 'otc_shift_fk', 'FOREIGN KEY (shift_id) REFERENCES shifts(id) ON DELETE CASCADE');\r\n  await ensureForeignKey('ot_counts', 'otc_dt_fk', 'FOREIGN KEY (depart_time_id) REFERENCES depart_times(id) ON DELETE CASCADE');\r\n\r\n  // 5.1) Overview counts per date/department/shift (grid totals without route/time)\r\n  await exec(`CREATE TABLE IF NOT EXISTS ot_overview_counts (\r\n    the_date DATE NOT NULL,\r\n    department_id INT NOT NULL,\r\n    shift_id INT NOT NULL,\r\n    count INT UNSIGNED NOT NULL DEFAULT 0,\r\n    updated_by INT NULL,\r\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\r\n    PRIMARY KEY (the_date, department_id, shift_id)\r\n  ) CHARSET=utf8mb4`);\r\n  await ensureForeignKey('ot_overview_counts', 'otoc_dept_fk', 'FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE CASCADE');\r\n  await ensureForeignKey('ot_overview_counts', 'otoc_shift_fk', 'FOREIGN KEY (shift_id) REFERENCES shifts(id) ON DELETE CASCADE');\r\n  await ensureForeignKey('ot_overview_counts', 'otoc_updated_by_fk', 'FOREIGN KEY (updated_by) REFERENCES users(id) ON DELETE SET NULL');\r\n\r\n  // 6) Locks per date\r\n  await exec(`CREATE TABLE IF NOT EXISTS ot_locks (\r\n    the_date DATE PRIMARY KEY,\r\n    is_locked TINYINT(1) NOT NULL DEFAULT 1,\r\n    locked_by_user_id INT NULL,\r\n    locked_at DATETIME NULL\r\n  ) CHARSET=utf8mb4`);\r\n    // Editable shop plan per date (for adminga overrides)\r\n    await exec(`CREATE TABLE IF NOT EXISTS ot_shop_plan (\r\n      the_date DATE PRIMARY KEY,\r\n      rice_shops INT DEFAULT 0,\r\n      minimart_shops INT DEFAULT 0,\r\n      noodle_shops INT DEFAULT 0,\r\n      updated_by INT NULL,\r\n      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\r\n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4`);\r\n    // Nurse plan per date and shift (editable)\r\n    await exec(`CREATE TABLE IF NOT EXISTS ot_nurse_plan (\r\n      the_date DATE NOT NULL,\r\n      shift_id INT NOT NULL,\r\n      nurse_count INT NOT NULL DEFAULT 1,\r\n      updated_by INT NULL,\r\n      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\r\n      PRIMARY KEY (the_date, shift_id)\r\n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4`);\r\n  await ensureForeignKey('ot_locks', 'otlock_user_fk', 'FOREIGN KEY (locked_by_user_id) REFERENCES users(id) ON DELETE SET NULL');\r\n\r\n  // 6.1) Department-level locks per date (granular lock per department)\r\n  await exec(`CREATE TABLE IF NOT EXISTS ot_department_locks (\r\n    the_date DATE NOT NULL,\r\n    department_id INT NOT NULL,\r\n    is_locked TINYINT(1) NOT NULL DEFAULT 1,\r\n    locked_by_user_id INT NULL,\r\n    locked_at DATETIME NULL,\r\n    PRIMARY KEY (the_date, department_id)\r\n  ) CHARSET=utf8mb4`);\r\n  await ensureForeignKey('ot_department_locks', 'otdeptlock_dept_fk', 'FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE CASCADE');\r\n  await ensureForeignKey('ot_department_locks', 'otdeptlock_user_fk', 'FOREIGN KEY (locked_by_user_id) REFERENCES users(id) ON DELETE SET NULL');\r\n    await ensureForeignKey('ot_shop_plan', 'otshop_updated_by_fk', 'FOREIGN KEY (updated_by) REFERENCES users(id) ON DELETE SET NULL');\r\n    await ensureForeignKey('ot_nurse_plan', 'otnurse_shift_fk', 'FOREIGN KEY (shift_id) REFERENCES shifts(id) ON DELETE CASCADE');\r\n    await ensureForeignKey('ot_nurse_plan', 'otnurse_updated_by_fk', 'FOREIGN KEY (updated_by) REFERENCES users(id) ON DELETE SET NULL');\r\n\r\n  // 6.2) Time-slot level locks per date/shift/depart_time (global)\r\n  await exec(`CREATE TABLE IF NOT EXISTS ot_time_locks (\r\n    the_date DATE NOT NULL,\r\n    shift_id INT NOT NULL,\r\n    depart_time_id INT NOT NULL,\r\n    is_locked TINYINT(1) NOT NULL DEFAULT 1,\r\n    locked_by_user_id INT NULL,\r\n    locked_at DATETIME NULL,\r\n    PRIMARY KEY (the_date, shift_id, depart_time_id)\r\n  ) CHARSET=utf8mb4`);\r\n  await ensureForeignKey('ot_time_locks', 'ottime_shift_fk', 'FOREIGN KEY (shift_id) REFERENCES shifts(id) ON DELETE CASCADE');\r\n  await ensureForeignKey('ot_time_locks', 'ottime_dt_fk', 'FOREIGN KEY (depart_time_id) REFERENCES depart_times(id) ON DELETE CASCADE');\r\n  await ensureForeignKey('ot_time_locks', 'ottime_user_fk', 'FOREIGN KEY (locked_by_user_id) REFERENCES users(id) ON DELETE SET NULL');\r\n\r\n  // 6.3) Department-level locks per date/shift/depart_time\r\n  await exec(`CREATE TABLE IF NOT EXISTS ot_department_time_locks (\r\n    the_date DATE NOT NULL,\r\n    department_id INT NOT NULL,\r\n    shift_id INT NOT NULL,\r\n    depart_time_id INT NOT NULL,\r\n    is_locked TINYINT(1) NOT NULL DEFAULT 1,\r\n    locked_by_user_id INT NULL,\r\n    locked_at DATETIME NULL,\r\n    PRIMARY KEY (the_date, department_id, shift_id, depart_time_id)\r\n  ) CHARSET=utf8mb4`);\r\n  await ensureForeignKey('ot_department_time_locks', 'otdepttime_dept_fk', 'FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE CASCADE');\r\n  await ensureForeignKey('ot_department_time_locks', 'otdepttime_shift_fk', 'FOREIGN KEY (shift_id) REFERENCES shifts(id) ON DELETE CASCADE');\r\n  await ensureForeignKey('ot_department_time_locks', 'otdepttime_dt_fk', 'FOREIGN KEY (depart_time_id) REFERENCES depart_times(id) ON DELETE CASCADE');\r\n  await ensureForeignKey('ot_department_time_locks', 'otdepttime_user_fk', 'FOREIGN KEY (locked_by_user_id) REFERENCES users(id) ON DELETE SET NULL');\r\n\r\n    // Car plan per date/shift/depart_time/route (editable by super admin)\r\n    await exec(`CREATE TABLE IF NOT EXISTS ot_car_plan (\r\n      the_date DATE NOT NULL,\r\n      shift_id INT NOT NULL,\r\n      depart_time_id INT NOT NULL,\r\n      route_id INT NOT NULL,\r\n      car_count INT NOT NULL DEFAULT 0,\r\n      updated_by INT NULL,\r\n      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\r\n      PRIMARY KEY (the_date, shift_id, depart_time_id, route_id)\r\n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4`);\r\n    await ensureForeignKey('ot_car_plan', 'otcar_shift_fk', 'FOREIGN KEY (shift_id) REFERENCES shifts(id) ON DELETE CASCADE');\r\n    await ensureForeignKey('ot_car_plan', 'otcar_dt_fk', 'FOREIGN KEY (depart_time_id) REFERENCES depart_times(id) ON DELETE CASCADE');\r\n    await ensureForeignKey('ot_car_plan', 'otcar_route_fk', 'FOREIGN KEY (route_id) REFERENCES routes(id) ON DELETE CASCADE');\r\n    await ensureForeignKey('ot_car_plan', 'otcar_updated_by_fk', 'FOREIGN KEY (updated_by) REFERENCES users(id) ON DELETE SET NULL');\r\n\r\n  // 6.x) Vendor payments per date/route (editable summary values)\r\n  await exec(`CREATE TABLE IF NOT EXISTS vendor_payments (\r\n      the_date DATE NOT NULL,\r\n      route_id INT NOT NULL,\r\n      pay_flat INT NOT NULL DEFAULT 0,           -- เหมาจ่าย\r\n      pay_wait INT NOT NULL DEFAULT 0,           -- จอดรอ\r\n      pay_ot_normal INT NOT NULL DEFAULT 0,      -- OT หมวดวันปกติ\r\n      pay_trip INT NOT NULL DEFAULT 0,           -- เหมานเที่ยว\r\n      pay_ot_holiday INT NOT NULL DEFAULT 0,     -- OT หมวดวันหยุด\r\n      pay_trip_night INT NOT NULL DEFAULT 0,     -- เหมานเที่ยวกะดึก\r\n      updated_by INT NULL,\r\n      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\r\n      PRIMARY KEY (the_date, route_id)\r\n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4`);\r\n  await ensureForeignKey('vendor_payments', 'vp_route_fk', 'FOREIGN KEY (route_id) REFERENCES routes(id) ON DELETE CASCADE');\r\n  await ensureForeignKey('vendor_payments', 'vp_updated_by_fk', 'FOREIGN KEY (updated_by) REFERENCES users(id) ON DELETE SET NULL');\r\n\r\n  // 6.x.1) Monthly vendor payments defaults (for pay_flat only)\r\n  await exec(`CREATE TABLE IF NOT EXISTS vendor_monthly_payments (\r\n      month_start DATE NOT NULL,                -- first day of month (e.g., 2025-09-01)\r\n      route_id INT NOT NULL,\r\n      pay_flat INT NOT NULL DEFAULT 0,          -- รายเดือน (เหมาจ่าย) สำหรับทั้งเดือน\r\n      updated_by INT NULL,\r\n      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\r\n      PRIMARY KEY (month_start, route_id)\r\n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4`);\r\n  await ensureForeignKey('vendor_monthly_payments', 'vmp_route_fk', 'FOREIGN KEY (route_id) REFERENCES routes(id) ON DELETE CASCADE');\r\n  await ensureForeignKey('vendor_monthly_payments', 'vmp_updated_by_fk', 'FOREIGN KEY (updated_by) REFERENCES users(id) ON DELETE SET NULL');\r\n\r\n  // 6.y) Vendor rates per route (persistent Cost values)\r\n  await exec(`CREATE TABLE IF NOT EXISTS vendor_rates (\r\n    route_id INT NOT NULL,\r\n    rate_flat DECIMAL(12,2) NOT NULL DEFAULT 0,\r\n    rate_wait DECIMAL(12,2) NOT NULL DEFAULT 0,\r\n    rate_ot_normal DECIMAL(12,2) NOT NULL DEFAULT 0,\r\n    rate_trip DECIMAL(12,2) NOT NULL DEFAULT 0,\r\n    rate_ot_holiday DECIMAL(12,2) NOT NULL DEFAULT 0,\r\n    rate_trip_night DECIMAL(12,2) NOT NULL DEFAULT 0,\r\n    updated_by INT NULL,\r\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\r\n    PRIMARY KEY (route_id)\r\n  ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4`);\r\n  await ensureForeignKey('vendor_rates', 'vr_route_fk', 'FOREIGN KEY (route_id) REFERENCES routes(id) ON DELETE CASCADE');\r\n  await ensureForeignKey('vendor_rates', 'vr_updated_by_fk', 'FOREIGN KEY (updated_by) REFERENCES users(id) ON DELETE SET NULL');\r\n\r\n  // 7) (Optional) Legacy tables FKs\r\n  await exec(`CREATE TABLE IF NOT EXISTS bookings (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    user_id INT NOT NULL,\r\n    product_id INT NOT NULL,\r\n    truck_number INT NOT NULL,\r\n    department VARCHAR(100) NOT NULL,\r\n    percentage INT NOT NULL,\r\n    booking_date DATE NOT NULL,\r\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\r\n    KEY idx_booking_lookup (booking_date, product_id, truck_number),\r\n    KEY user_id (user_id),\r\n    KEY product_id (product_id)\r\n  ) CHARSET=utf8mb4`);\r\n  await ensureForeignKey('bookings', 'bookings_user_fk', 'FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE');\r\n  await ensureForeignKey('bookings', 'bookings_product_fk', 'FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE');\r\n\r\n  // Transport registrations (for adminga first)\r\n  await exec(`CREATE TABLE IF NOT EXISTS transport_registrations (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    employee_code VARCHAR(50) NOT NULL,\r\n    full_name VARCHAR(150) NOT NULL,\r\n    employee_type VARCHAR(100) NULL,\r\n    plant_id INT NULL,\r\n    department_id INT NULL,\r\n    department_text VARCHAR(100) NULL,\r\n    route_id INT NULL,\r\n    pickup_point VARCHAR(150) NULL,\r\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\r\n    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\r\n  ) CHARSET=utf8mb4`);\r\n  // Backfill new column for existing DBs\r\n  await exec(`ALTER TABLE transport_registrations ADD COLUMN IF NOT EXISTS department_text VARCHAR(100) NULL`);\r\n  await ensureForeignKey('transport_registrations', 'tr_plant_fk', 'FOREIGN KEY (plant_id) REFERENCES plants(id) ON DELETE SET NULL');\r\n  await ensureForeignKey('transport_registrations', 'tr_dept_fk', 'FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE SET NULL');\r\n  await ensureForeignKey('transport_registrations', 'tr_route_fk', 'FOREIGN KEY (route_id) REFERENCES routes(id) ON DELETE SET NULL');\r\n\r\n  // Employee types (master)\r\n  await exec(`CREATE TABLE IF NOT EXISTS employee_types (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    name VARCHAR(100) NOT NULL UNIQUE,\r\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\r\n  ) CHARSET=utf8mb4`);\r\n\r\n  // Pickup points (master) - optional relation to route\r\n  await exec(`CREATE TABLE IF NOT EXISTS pickup_points (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    name VARCHAR(150) NOT NULL UNIQUE,\r\n    route_id INT NULL,\r\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\r\n  ) CHARSET=utf8mb4`);\r\n  await ensureForeignKey('pickup_points', 'pp_route_fk', 'FOREIGN KEY (route_id) REFERENCES routes(id) ON DELETE SET NULL');\r\n\r\n  if (seed) {\r\n    // Seed plants\r\n    await exec(`INSERT INTO plants (code, name) VALUES ('AC','AC'),('RF','RF'),('SSC','SSC')`);\r\n    // Seed departments (examples)\r\n    await exec(`INSERT INTO departments (plant_id, code, name)\r\n      SELECT p.id, 'SAC','SAC' FROM plants p WHERE p.code='AC';`);\r\n    await exec(`INSERT INTO departments (plant_id, code, name)\r\n      SELECT p.id, 'AIO','AIO' FROM plants p WHERE p.code='AC';`);\r\n    await exec(`INSERT INTO departments (plant_id, code, name)\r\n      SELECT p.id, 'RF-A','RF-A' FROM plants p WHERE p.code='RF';`);\r\n    await exec(`INSERT INTO departments (plant_id, code, name)\r\n      SELECT p.id, 'RF-B','RF-B' FROM plants p WHERE p.code='RF';`);\r\n    await exec(`INSERT INTO departments (plant_id, code, name)\r\n      SELECT p.id, 'HR','HR' FROM plants p WHERE p.code='SSC';`);\r\n    await exec(`INSERT INTO departments (plant_id, code, name)\r\n      SELECT p.id, 'SCM','SCM' FROM plants p WHERE p.code='SSC';`);\r\n\r\n    // Seed shifts and times\r\n    await exec(`INSERT INTO shifts (name_th, name_en) VALUES ('กะกลางวัน','Day Shift'),('กะกลางคืน','Night Shift')`);\r\n    await exec(`INSERT INTO depart_times (shift_id, time)\r\n      SELECT s.id, '17:00:00' FROM shifts s WHERE s.name_th='กะกลางวัน'`);\r\n    await exec(`INSERT INTO depart_times (shift_id, time)\r\n      SELECT s.id, '19:10:00' FROM shifts s WHERE s.name_th='กะกลางวัน'`);\r\n\r\n    // Seed routes\r\n    const routeNames = ['คลองอุดม','วิจิตรา','สระแท่น','นาดี','ครัวอากู๋','บ้านเลียบ','สันติสุข','ปราจีนบุรี','สระแก้ว','ดงน้อย'];\r\n    for (let i=0; i<routeNames.length; i++) {\r\n      const name = routeNames[i];\r\n      await exec(`INSERT INTO routes (name, display_order) VALUES ('${name}', ${i+1})`);\r\n    }\r\n\r\n    // Seed super admin (password: 12345 placeholder hashed recommended in auth flow)\r\n    // Note: Keep existing login-bypass in dev as earlier.\r\n  }\r\n\r\n  return { ok: true };\r\n}\r\n\r\n// Compatibility: existing routes import getConnection; provide pooled connection.\r\nexport async function getConnection() {\r\n  return getPool().getConnection();\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 652, "column": 0}, "map": {"version":3,"sources":["file:///Users/sonjutha/Downloads/Bus-system/src/lib/auth.js"],"sourcesContent":["import jwt from 'jsonwebtoken';\nimport { query, initDatabase } from '@/lib/db';\n\nconst SECRET_KEY = process.env.JWT_SECRET;\nif (!SECRET_KEY) {\n  throw new Error('Missing JWT_SECRET env var');\n}\n\nexport async function getUserFromRequest(request) {\n  try {\n    const hdr = request.headers.get('authorization') || '';\n    const token = hdr.startsWith('Bearer ') ? hdr.slice(7) : null;\n    if (!token) return null;\n    const decoded = jwt.verify(token, SECRET_KEY);\n\n    // Dev bypass: if adminga from bypass, return super admin-like\n    if (decoded && decoded.username === 'adminga' && decoded.userId === 0) {\n      return {\n        id: 0,\n        username: 'adminga',\n        is_admin: 1,\n        is_super_admin: 1,\n        display_name: 'Admin GA',\n        plant_id: null,\n        department_id: null,\n      };\n    }\n\n    // Load fresh from DB to get latest roles and scope\n    const rows = await query('SELECT id, username, is_admin, is_super_admin, display_name, plant_id, department_id FROM users WHERE id = ?', [decoded.userId]);\n    if (!rows.length) return null;\n    // Also load multi-department memberships if available\n    let department_ids = [];\n    try {\n      const drows = await query('SELECT department_id FROM user_departments WHERE user_id = ?', [rows[0].id]);\n      department_ids = (Array.isArray(drows) ? drows : []).map(r => r.department_id).filter(Boolean);\n    } catch (e) {\n      // ignore if table missing; init paths elsewhere will create it lazily\n      department_ids = [];\n    }\n    return { ...rows[0], department_ids };\n  } catch (e) {\n    return null;\n  }\n}\n\nexport function signToken(payload) {\n  return jwt.sign(payload, SECRET_KEY, { expiresIn: '1d' });\n}\n\nexport function requireAuth(user) {\n  if (!user) {\n    const error = new Error('Unauthorized');\n    error.status = 401;\n    throw error;\n  }\n}\n\nexport function requireAdmin(user) {\n  requireAuth(user);\n  if (!(user.is_super_admin || user.is_admin)) {\n    const error = new Error('Forbidden');\n    error.status = 403;\n    throw error;\n  }\n}\n\nexport async function isDateLocked(dateStr) {\n  const rows = await (async () => {\n    try {\n      return await query('SELECT is_locked FROM ot_locks WHERE the_date = ?', [dateStr]);\n    } catch (err) {\n      const msg = String(err?.message || '');\n      const isNoTable = err?.code === 'ER_NO_SUCH_TABLE' || msg.includes(\"doesn't exist\") || err?.sqlState === '42S02';\n      if (!isNoTable) throw err;\n      await initDatabase();\n      return query('SELECT is_locked FROM ot_locks WHERE the_date = ?', [dateStr]);\n    }\n  })();\n  if (!rows.length) return false;\n  return !!rows[0].is_locked;\n}\n\n// Department-level lock check; if no row exists, falls back to global date lock\nexport async function isDepartmentLocked(dateStr, departmentId) {\n  if (!departmentId) return isDateLocked(dateStr);\n  const rows = await (async () => {\n    try {\n      return await query('SELECT is_locked FROM ot_department_locks WHERE the_date = ? AND department_id = ?', [dateStr, departmentId]);\n    } catch (err) {\n      const msg = String(err?.message || '');\n      const isNoTable = err?.code === 'ER_NO_SUCH_TABLE' || msg.includes(\"doesn't exist\") || err?.sqlState === '42S02';\n      if (!isNoTable) throw err;\n      await initDatabase();\n      return query('SELECT is_locked FROM ot_department_locks WHERE the_date = ? AND department_id = ?', [dateStr, departmentId]);\n    }\n  })();\n  if (rows.length) return !!rows[0].is_locked;\n  // If no department-specific row, use global lock (if any)\n  return isDateLocked(dateStr);\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 782, "column": 0}, "map": {"version":3,"sources":["file:///Users/sonjutha/Downloads/Bus-system/src/app/api/transport/masters/pickup-points/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { query, initDatabase } from '@/lib/db';\nimport { getUserFromRequest } from '@/lib/auth';\n\nasync function withInitRetry(action) {\n  try { return await action(); } catch (err) {\n    const msg = String(err?.message || '');\n    const isNoTable = err?.code === 'ER_NO_SUCH_TABLE' || msg.includes(\"doesn't exist\") || err?.sqlState === '42S02';\n    if (!isNoTable) throw err;\n    await initDatabase();\n    return action();\n  }\n}\n\nfunction guard(user) {\n  const isAdminga = String(user?.username || '').toLowerCase() === 'adminga';\n  if (!(user?.is_super_admin || isAdminga)) {\n    const e = new Error('forbidden'); e.status = 403; throw e;\n  }\n}\n\nexport async function GET(request) {\n  const { searchParams } = new URL(request.url);\n  const routeId = searchParams.get('routeId');\n  const params = [];\n  let where = '';\n  if (routeId) { where = 'WHERE (route_id IS NULL OR route_id = ?)'; params.push(routeId); }\n  const rows = await withInitRetry(() => query(`SELECT id, name, route_id FROM pickup_points ${where} ORDER BY name`, params));\n  return NextResponse.json(rows);\n}\n\nexport async function POST(request) {\n  const user = await getUserFromRequest(request);\n  try { guard(user); } catch (e) { return NextResponse.json({ error: e.message }, { status: e.status || 403 }); }\n  const { name, route_id=null } = await request.json();\n  if (!name || !name.trim()) return NextResponse.json({ error: 'missing name' }, { status: 400 });\n  await withInitRetry(() => query('INSERT INTO pickup_points (name, route_id) VALUES (?,?)', [name.trim(), route_id || null]));\n  return NextResponse.json({ ok: true });\n}\n\nexport async function PUT(request) {\n  const user = await getUserFromRequest(request);\n  try { guard(user); } catch (e) { return NextResponse.json({ error: e.message }, { status: e.status || 403 }); }\n  const { id, name, route_id=null } = await request.json();\n  if (!id || !name || !name.trim()) return NextResponse.json({ error: 'missing fields' }, { status: 400 });\n  await withInitRetry(() => query('UPDATE pickup_points SET name=?, route_id=? WHERE id=?', [name.trim(), route_id || null, id]));\n  return NextResponse.json({ ok: true });\n}\n\nexport async function DELETE(request) {\n  const user = await getUserFromRequest(request);\n  try { guard(user); } catch (e) { return NextResponse.json({ error: e.message }, { status: e.status || 403 }); }\n  const { searchParams } = new URL(request.url);\n  const id = searchParams.get('id');\n  if (!id) return NextResponse.json({ error: 'missing id' }, { status: 400 });\n  await withInitRetry(() => query('DELETE FROM pickup_points WHERE id=?', [id]));\n  return NextResponse.json({ ok: true });\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}